from typing import Any

import time
import pickle
import numpy as np
import keras_tuner as kt
from sklearn.metrics import roc_curve
import matplotlib
import matplotlib.pyplot as plt
from fastapi import FastAPI, UploadFile, File
from gensim.models.doc2vec import Doc2Vec

from train import create_mlp_model
from test_r2pipe import load_opcode_from_binary_file

app = FastAPI()

embedding_model = Doc2Vec.load("d2v_model.model")

# Create tuner for load mlp model
tuner = kt.Hyperband(
    create_mlp_model,
    objective='val_accuracy',
    max_epochs=20,
    factor=3,
    directory='results',
    project_name='malware-classify-mlp'
)
# Get best mlp model
best_models = tuner.get_best_models(num_models=1)
malware_classify_model = best_models[0]

# Load test
X_test = pickle.load(open("X_test.npy", "rb"))
y_test = pickle.load(open("y_test.npy", "rb"))
print("Data size", len(X_test))


def plot_roc_curve(true_y, y_prob):
    """
    plots the roc curve based of the probabilities
    """
    plt.subplots(1, figsize=(10,10))
    fpr, tpr, thresholds = roc_curve(true_y, y_prob)
    plt.plot(fpr, tpr, label="AUC")
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.legend(loc=4)
    plt.show()

# Evaluate and calculate
start_time = time.time()
results = malware_classify_model.evaluate(X_test, y_test, batch_size=32)
y_pred = malware_classify_model.predict(X_test, batch_size=32)
plot_roc_curve(y_test.argmax(axis=1), y_pred.argmax(axis=1))

process_time = time.time() - start_time
print("Time consume:", process_time)
print("Time consume per request:", process_time / len(X_test))
print("test loss, test acc:", results)


@app.post("/predict/")
async def predict(file: UploadFile = File(...)) -> Any:
    file_location = f"files/{file.filename}"
    with open(file_location, "wb+") as file_object:
        file_object.write(file.file.read())

    # Load opcode using radare2
    opcode_word_list, opcode_list = load_opcode_from_binary_file(file_location)

    # Embedding opcode
    embedding_file = embedding_model.infer_vector(doc_words=opcode_word_list, epochs=100, alpha=0.025)

    # Classify malware
    malware_predict = malware_classify_model.predict(np.expand_dims(embedding_file, axis=0), verbose=0)

    return {
        "filename": file.filename,
        "opcode_list": opcode_list,
        "prediction": {
            "beggin": malware_predict[0][0] * 100,
            "malware": malware_predict[0][1] * 100
        }
    }
