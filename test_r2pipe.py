import r2pipe
import json
import re
from tqdm import tqdm
import os
from typing import List

rootdir = '/media/thanh/THÃ€NH/project/malware-classification/data'

def load_opcode_from_binary_file(file_path: str) -> List[str]:
    r2 = r2pipe.open(file_path)
    r2.cmd('aa')
    # print(r2.cmd("agfg"))
    reversed_list_string: str = r2.cmd("agfj")
    reversed_list = json.loads(reversed_list_string)

    if len(reversed_list) != 1:
        raise ValueError(file_path, "len", len(reversed_list))

    reversed_json = reversed_list[0]
    opcode_word_list: List[str] = []
    for block in reversed_json['blocks']:
        for op in block['ops']:
            opcode = op['opcode'].strip()
            # words = re.split(';|,| ', opcode)
            opcode_list: List[str] = re.findall(r'\w+|\S', opcode)
            opcode_word_list.extend(opcode_list)
        
    r2.quit()
    return opcode_word_list

malware_data_with_slices = {}

for subdir, dirs, files in os.walk(rootdir):
    if len(files):
        subdir_split = subdir.split('/')
        type_dataset = subdir_split[-2]
        malware_class = subdir_split[-1]
        if type_dataset not in malware_data_with_slices.keys():
            malware_data_with_slices[type_dataset] = {}
        if malware_class not in malware_data_with_slices[type_dataset].keys():
            malware_data_with_slices[type_dataset][malware_class] = {}
        print(f"========= Srart process {type_dataset} - {malware_class} =========")
        for file in tqdm(files):
            file_path = f'{subdir}/{file}'
            try:
                opcode_word_list = load_opcode_from_binary_file(file_path)
                malware_data_with_slices[type_dataset][malware_class][file] = opcode_word_list
            except Exception as e:
                print(file_path, e)
                continue

# Serializing json
json_object = json.dumps(malware_data_with_slices, indent=4)
 
# Writing to sample.json
with open("malware_data_with_slices.json", "w") as outfile:
    outfile.write(json_object)

# print(load_opcode_from_binary_file("./data/test/malware/Backdoor.Win32.Salgorea.c-5ab1941d8cac75d2bfffd526fcf9bbe8cfda769846db6e9bde8bcc55165928a8"))